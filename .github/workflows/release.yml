name: release

on:
  release:
    types:
      - published

permissions:
  contents: write

jobs:
  release:
    name: release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: aarch64-apple-darwin, os: macos-14 }
          # - { target: aarch64-pc-windows-gnullvm, os: ubuntu-22.04 }
          - { target: aarch64-pc-windows-msvc, os: windows-2022 }
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-22.04 }
          - { target: aarch64-unknown-linux-musl, os: ubuntu-22.04 }
          - { target: armv7-unknown-linux-gnueabi, os: ubuntu-22.04 }
          - { target: armv7-unknown-linux-gnueabihf, os: ubuntu-22.04 }
          - { target: armv7-unknown-linux-musleabi, os: ubuntu-22.04 }
          - { target: armv7-unknown-linux-musleabihf, os: ubuntu-22.04 }
          - { target: x86_64-apple-darwin, os: macos-14 }
          - { target: x86_64-pc-windows-gnu, os: ubuntu-22.04 }
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-22.04 }
          - { target: x86_64-unknown-linux-musl, os: ubuntu-22.04 }
    steps:
      - name: Checkout
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
      - name: Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@d8352f6b1d2e870bc5716e7a6d9b65c4cc244a1a # master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
      - name: Install cross
        run: cargo install --force cross
        if: runner.os == 'Linux'
      - name: Build
        run: cargo build --locked --release --target=${{ matrix.target }}
        if: runner.os != 'Linux'
      - name: Build (cross)
        run: cross build --locked --release --target=${{ matrix.target }}
        if: runner.os == 'Linux'
      - name: Archive
        id: archive
        shell: bash
        run: |
          # Set $BIN_NAME
          case ${{ matrix.target }} in
            *-pc-windows-*) BIN_NAME_SUFFIX='.exe' ;;
            *) BIN_NAME_SUFFIX='' ;;
          esac
          BIN_NAME="pitchconv${BIN_NAME_SUFFIX}"

          cp "target/${{ matrix.target }}/release/${BIN_NAME}" .

          # Set $ARCHIVE_PATH
          RELEASE_VERSION="${GITHUB_REF#refs/tags/v}"
          ARCHIVE_BASENAME="pitchconv-${RELEASE_VERSION}-${{ matrix.target }}"
          case ${{ matrix.target }} in
            *-pc-windows-*) ARCHIVE_SUFFIX='.zip' ;;
            *) ARCHIVE_SUFFIX='.tar.gz' ;;
          esac
          ARCHIVE_PATH="${ARCHIVE_BASENAME}${ARCHIVE_SUFFIX}"

          # Create archive
          case ${{ matrix.target }} in
            *-pc-windows-*) 7z a "${ARCHIVE_PATH}" "${BIN_NAME}" LICENSE-APACHE LICENSE-MIT README.md ;;
            *) tar -czf "${ARCHIVE_PATH}" "${BIN_NAME}" LICENSE-APACHE LICENSE-MIT README.md ;;
          esac

          echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> "$GITHUB_ENV"
      - name: Publish release
        uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87 # v2.0.5
        with:
          files: ${{ env.ARCHIVE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
